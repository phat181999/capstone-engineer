version: 2.1

orbs:
  aws-eks: circleci/aws-eks@0.2.3
  aws-ecr: circleci/aws-ecr@3.1.0
  kubernetes: circleci/kubernetes@0.4.0

commands:
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
jobs:
  run-lint:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64
            sudo chmod +x /bin/hadolint
      - run:
          name: Run Lint
          command: |
            hadolint Dockerfile

  build-docker-image:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout

      - setup_remote_docker:
          version: 19.03.13

      - run:
          name: Build Docker Image
          command: |
            export TAG=v${CIRCLE_BUILD_NUM}
            export IMAGE_NAME=capstone-engineer-cloud-hotanphat
            docker build -t phat99/$IMAGE_NAME:$TAG .

  push-docker-image:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Push Docker Image to Docker Hub
          command: |
            export TAG=v${CIRCLE_BUILD_NUM}
            export IMAGE_NAME=capstone-engineer-cloud-hotanphat

            docker build -t phat99/$IMAGE_NAME:$TAG .
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD 
            docker push phat99/$IMAGE_NAME:$TAG

  deploy-application:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      docker-image-name:
        description: |
          Name of the docker image to be deployed
        type: string
      version-info:
        description: |
          App version information
        type: string
      aws-region:
        description: |
          AWS region
        type: string
        default: "us-east-1"
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
          aws-region: << parameters.aws-region >>
      - kubernetes/create-or-update-resource:
          resource-file-path: "deployments/deployment.yml"
          get-rollout-status: true
          resource-name: deployment/capstone
      - kubernetes/create-or-update-resource:
          resource-file-path: "deployments/deployment.yml"

  verify-credential:
    docker:
      - image: circleci/python:3.8

    steps:
      - checkout
      # Step to install AWS CLI
      - run:
          name: Install AWS CLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      # Step to check Docker authentication
      - run:
          name: Check Docker Authentication
          command: |

            AWS_ECR_PASSWORD=$(aws ecr get-login-password --region $AWS_DEFAULT_REGION)
            echo $AWS_ECR_PASSWORD | docker login --username AWS --password-stdin 787290081433.dkr.ecr.us-east-1.amazonaws.com

workflows:
  default:
    jobs:
      - run-lint
      - build-docker-image
      - push-docker-image:
          requires:
            - "build-docker-image"
      - verify-credential
      - aws-ecr/build_and_push_image:
          name: build-and-push-image-ecr
          account-url: 787290081433.dkr.ecr.us-east-1.amazonaws.com
          region: AWS_DEFAULT_REGION
          repo: eks_orb_capstone_project
          dockerfile: ~/project/Dockerfile
          path: ~/project/
          tag: ${CIRCLE_SHA1}
      - aws-eks/create-cluster:
          cluster-name: eks-orb-capstone-project-deployment-${CIRCLE_WORKFLOW_ID:0:7}
          aws-region: $AWS_DEFAULT_REGION
          requires:
            - build-and-push-image-ecr
      - deploy-application:
          cluster-name: eks-orb-capstone-project-deployment-${CIRCLE_WORKFLOW_ID:0:7}
          aws-region: $AWS_DEFAULT_REGION
          docker-image-name: "787290081433.dkr.ecr.us-east-1.amazonaws.com/capstone-engineer-cloud-buildpush:${CIRCLE_SHA1}"
          version-info: "${CIRCLE_SHA1}"
          requires:
            - aws-eks/create-cluster
