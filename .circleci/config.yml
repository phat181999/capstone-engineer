version: 2.1

orbs:
  aws-eks: circleci/aws-eks@2.2.0
  aws-ecr: circleci/aws-ecr@3.1.0
  aws-cli: circleci/aws-cli@1.4.0
  kubernetes: circleci/kubernetes@1.3.1
executors:
  aws-eks/linux-machine:
    machine:
      image: ubuntu-2004:202106-01

jobs:
  run-lint:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install hadolint
          command: |
            sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64
            sudo chmod +x /bin/hadolint
      - run:
          name: Run Lint
          command: |
            hadolint Dockerfile

  build-push-docker-image:
    machine: true
    working_directory: ~/app
    steps:
      - checkout
      - run:
          name: build and push docker image
          command: |
            #Login to docker hub
            docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
            # Build image and add a descriptive tag
            docker build --tag=uda-cap .
            # List docker images
            docker image ls
            # Push image to a docker repository
            docker tag uda-cap phat99/uda-cap
            docker push phat99/uda-cap

  deploy-to-cluster:
    docker:
      - image: cimg/python:3.10
    parameters:
      cluster-name:
        description: |
          uda-cap
        type: string
    steps:
      - checkout
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          # get-rollout-status: true
          resource-file-path: deployments/deployment.yml
          resource-name: deployment/uda-cap

  check-cluster:
    docker:
      - image: cimg/python:3.10
    parameters:
      cluster-name:
        description: |
          uda-cap
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          name: check cluster
          command: |
            kubectl get nodes
            kubectl get deployment

workflows:
  deployment:
    jobs:
      - run-lint
      - build-push-docker-image:
          requires: [run-lint]
      - aws-eks/create-cluster:
          cluster-name: eks-demo-deployment
      # - deploy-to-cluster:
      #     cluster-name: uda-cap
      #     requires: [aws-eks/create-cluster]
      # - aws-eks/update-container-image:
      #     cluster-name: uda-cap
      #     container-image-updates: uda-cap=phat99/uda-cap
      #     post-steps:
      #       - kubernetes/delete-resource:
      #           resource-names: uda-cap
      #           resource-types: deployment
      #           wait: true
      #     requires: [deploy-to-cluster]
      #     resource-name: deployment/uda-cap
      # - check-cluster:
      #     cluster-name: uda-cap
      #     requires: [aws-eks/update-container-image]
      # - aws-eks/delete-cluster:
      #     cluster-name: uda-cap
      #     requires: [check-cluster]
# ====================================
# jobs:
#   run-lint:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - run:
#           name: Install hadolint
#           command: |
#             sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64
#             sudo chmod +x /bin/hadolint
#       - run:
#           name: Run Lint
#           command: |
#             hadolint Dockerfile

#   build-docker-image:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - setup_remote_docker:
#           version: 19.03.13
#       - run:
#           name: Build Docker Image
#           command: |
#             export TAG=v${CIRCLE_BUILD_NUM}
#             export IMAGE_NAME=capstone-engineer-cloud-hotanphat
#             docker build -t phat99/$IMAGE_NAME:$TAG .

#   push-docker-image:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - setup_remote_docker:
#           version: 19.03.13
#       - run:
#           name: Push Docker Image to Docker Hub
#           command: |
#             export TAG=v${CIRCLE_BUILD_NUM}
#             export IMAGE_NAME=capstone-engineer-cloud-hotanphat

#             docker build -t phat99/$IMAGE_NAME:$TAG .
#             docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
#             docker push phat99/$IMAGE_NAME:$TAG

#   authen-aws-iam:
#     docker:
#       - image: circleci/python:3.9

#     steps:
#       - checkout
#       - run:
#           name: Install AWS IAM Authenticator
#           command: |
#             if which aws-iam-authenticator > /dev/null; then
#               echo "AWS IAM Authenticator for Kubernetes is already installed"
#               exit 0
#             fi

#             curl -o aws-iam-authenticator https://amazon-eks.s3.us-east-1.amazonaws.com/1.20.7/2021-04-12/bin/linux/amd64/aws-iam-authenticator
#             chmod +x aws-iam-authenticator
#             sudo mv aws-iam-authenticator /usr/local/bin/

#   deploy-application:
#     parameters:
#       stack-name:
#         description: Name of the CloudFormation stack
#         type: string
#     executor: aws-cli/default
#     steps:
#       - checkout
#       - aws-cli/setup
#       - setup_remote_docker:
#           version: 19.03.13
#       - run:
#           name: Configure AWS ECR credentials
#           command: |
#             export AWS_ECR_REGISTRY=134412166047.dkr.ecr.us-east-1.amazonaws.com
#             export AWS_ECR_REPOSITORY=eks_orb_capstone_project
#             export TAG="v1.${CIRCLE_BUILD_NUM}"

#             aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID}
#             aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}
#             aws configure set default.region ${AWS_DEFAULT_REGION}

#             aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin 134412166047.dkr.ecr.us-east-1.amazonaws.com
#       - run:
#           name: Build and Push Docker Image
#           command: |
#             export TAG="v1.${CIRCLE_BUILD_NUM}"
#             docker build -t 134412166047.dkr.ecr.us-east-1.amazonaws.com/capstone-engineer-cloud-hotanphat:$TAG .
#             docker push 134412166047.dkr.ecr.us-east-1.amazonaws.com/capstone-engineer-cloud-hotanphat:$TAG

#       # Deploy CloudFormation stack
#       - run:
#           name: Deploy CloudFormation Stack
#           command: |
#             aws cloudformation deploy --region ${AWS_DEFAULT_REGION} --stack capstone-project --template deployments/deployment.yml
#       - run:
#           name: Wait for service to be ready
#           command: |
#             curl --location -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/kubectl
#             chmod +x ./kubectl
#             sudo mv ./kubectl /usr/local/bin/kubectl
#             aws eks --region us-east-1 update-kubeconfig --name final-project
#             aws eks list-clusters
#             # kubectl get nodes
#             # kubectl get deployment

#   test-application:
#     executor: aws-cli/default
#     steps:
#       - checkout
#       - aws-cli/setup
#       - run:
#           name: Configure AWS ECR credentials
#           command: |
#             export AWS_ECR_REGISTRY=134412166047.dkr.ecr.us-east-1.amazonaws.com
#             export AWS_ECR_REPOSITORY=eks_orb_capstone_project
#             export TAG="v1.${CIRCLE_BUILD_NUM}"

#             aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID}
#             aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}
#             aws configure set default.region ${AWS_DEFAULT_REGION}

#             aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin 134412166047.dkr.ecr.us-east-1.amazonaws.com
#       - run:
#           name: Install kubectl
#           command: |
#             curl --location -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/kubectl
#             chmod +x ./kubectl
#             sudo mv ./kubectl /usr/local/bin/kubectl
#       - run:
#           name: Configure AWS credentials and cluster context
#           command: |
#             aws eks --region ${AWS_DEFAULT_REGION} update-kubeconfig --name final-project
#             kubectl get nodes
#             kubectl get services

#   check-cluster:
#     docker:
#       - image: cimg/python:3.10
#     parameters:
#       cluster-name:
#         description: |
#           uda-cap
#         type: string
#     steps:
#       - kubernetes/install
#       - aws-eks/update-kubeconfig-with-authenticator:
#           cluster-name: << parameters.cluster-name >>
#       - run:
#           name: check cluster
#           command: |
#             kubectl get nodes
#             kubectl get deployment

# workflows:
#   version: 2
#   build-and-deploy:
#     jobs:
#       - run-lint
#       - build-docker-image
#       - push-docker-image:
#           requires:
#             - "build-docker-image"
#       - authen-aws-iam
#       - aws-ecr/build_and_push_image:
#           name: build-and-push-image-ecr
#           account-url: AWS_ECR_URL
#           region: AWS_DEFAULT_REGION
#           repo: capstone-engineer-cloud-hotanphat
#           dockerfile: Dockerfile
#           path: .
#           tag: ${CIRCLE_SHA1}
#       - deploy-application:
#           stack-name: "capstone-project-final"
#       - check-cluster:
#           cluster-name: final-project
