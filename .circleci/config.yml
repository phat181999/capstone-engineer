version: 2.1

orbs:
  # aws-eks: circleci/aws-eks@0.2.3
  aws-ecr: circleci/aws-ecr@3.1.0
  aws-cli: circleci/aws-cli@1.4.0
  # orbs:
  aws-eks: circleci/aws-eks@1.0.3
  kubernetes: circleci/kubernetes@0.11.2
commands:
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

jobs:
  run-lint:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install hadolint
          command: |
            sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64
            sudo chmod +x /bin/hadolint
      - run:
          name: Run Lint
          command: |
            hadolint Dockerfile

  build-docker-image:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Build Docker Image
          command: |
            export TAG=v${CIRCLE_BUILD_NUM}
            export IMAGE_NAME=capstone-engineer-cloud-hotanphat
            docker build -t phat99/$IMAGE_NAME:$TAG .

  push-docker-image:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Push Docker Image to Docker Hub
          command: |
            export TAG=v${CIRCLE_BUILD_NUM}
            export IMAGE_NAME=capstone-engineer-cloud-hotanphat

            docker build -t phat99/$IMAGE_NAME:$TAG .
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker push phat99/$IMAGE_NAME:$TAG

  authen-aws-iam:
    docker:
      - image: circleci/python:3.9

    steps:
      - checkout
      - run:
          name: Install AWS IAM Authenticator
          command: |
            if which aws-iam-authenticator > /dev/null; then
              echo "AWS IAM Authenticator for Kubernetes is already installed"
              exit 0
            fi

            curl -o aws-iam-authenticator https://amazon-eks.s3.us-east-1.amazonaws.com/1.20.7/2021-04-12/bin/linux/amd64/aws-iam-authenticator
            chmod +x aws-iam-authenticator
            sudo mv aws-iam-authenticator /usr/local/bin/

  deploy-application:
    parameters:
      stack-name:
        description: Name of the CloudFormation stack
        type: string
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Configure AWS ECR credentials
          command: |
            export AWS_ECR_REGISTRY=134412166047.dkr.ecr.us-east-1.amazonaws.com
            export AWS_ECR_REPOSITORY=eks_orb_capstone_project
            export TAG="v1.${CIRCLE_BUILD_NUM}"

            aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID}
            aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}
            aws configure set default.region ${AWS_DEFAULT_REGION}

            aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin 134412166047.dkr.ecr.us-east-1.amazonaws.com
      - run:
          name: Build and Push Docker Image
          command: |
            export TAG="v1.${CIRCLE_BUILD_NUM}"
            docker build -t 134412166047.dkr.ecr.us-east-1.amazonaws.com/capstone-engineer-cloud-hotanphat:$TAG .
            docker push 134412166047.dkr.ecr.us-east-1.amazonaws.com/capstone-engineer-cloud-hotanphat:$TAG

      # Deploy CloudFormation stack
      - run:
          name: Deploy CloudFormation Stack
          command: |
            aws cloudformation deploy --region ${AWS_DEFAULT_REGION} --stack capstone-project --template deployments/deployment.yml
      - run:
          name: Wait for service to be ready
          command: |
            curl --location -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl
            aws eks --region us-east-1 update-kubeconfig --name final-project
            aws eks list-clusters
            # kubectl get nodes
            # kubectl get deployment

  test-application:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      aws-region:
        description: |
          AWS region
        type: string
        default: ""
      expected-version-info:
        description: |
          Expected app version (this is used for testing that the
          correct version has been deployed)
        type: string
    steps:
      - run:
          name: run kubectl
          command: curl --location -o kubectl https://storage.googleapis.com/kubernetes-release/release/v1.21.2/bin/linux/amd64/kubectl
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
          aws-region: << parameters.aws-region >>
      - run:
          name: Wait for service to be ready
          command: |
            kubectl get pods
            kubectl get services
  create-eks-cluster:
    executor: aws-eks/python3
    steps:
      - checkout
      - aws-eks/create-cluster:
          cluster-name: my-eks-cluster
          region: us-east-1
          version: "1.21"
workflows:
  version: 2
  build-and-deploy:
    jobs:
      - run-lint
      - build-docker-image
      - push-docker-image:
          requires:
            - "build-docker-image"
      - authen-aws-iam
      - aws-ecr/build_and_push_image:
          name: build-and-push-image-ecr
          account-url: AWS_ECR_URL
          region: AWS_DEFAULT_REGION
          repo: capstone-engineer-cloud-hotanphat
          dockerfile: Dockerfile
          path: .
          tag: ${CIRCLE_SHA1}
      - aws-eks/create-cluster:
          cluster-name: uda-cap
      # - deploy-application:
      #     stack-name: "capstone-project-final"
      # - test-application:
      #     cluster-name: final-project
      #     aws-region: $AWS_DEFAULT_REGION
      #     expected-version-info: "${CIRCLE_SHA1}"
      #     requires:
      #       - deploy-application
